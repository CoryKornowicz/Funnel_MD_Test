#!/bin/python

import numpy as np
import csv
import glob

from matplotlib import colors
import matplotlib.pyplot as plt
import seaborn as sns

def retrieveMBAROutput(path_to_datafile, verbose=False):
	"""
	Read SOMD-generated MBAR output file and return information.

	--args
	path_to_datafile (str): path to SOMD-generated MBAR output file

	--returns
	overlap_matrix (array): phase-space overlap matrix generated by PyMBAR
	MBAR_freenrg (float): Free energy estimation generated by PyMBAR
	MBAR_error (float): Error estimation generated by PyMBAR
	"""
	overlap_matrix = None
	MBAR_freenrg = None
	MBAR_error = None

	if verbose:
		print(path_to_datafile)
	try:
		f = open(path_to_datafile, "r")
	except FileNotFoundError:
		print("Unable to find "+path_to_datafile)
		return (None, None, None)

	for line in f:

		## OVERLAP MATRIX
		# read the line after the #Overlap keyword for overlap matrix.
		if "#Overlap matrix" in line:

			overlap_matrix = []
			# grab and process next line until end of matrix.
			row = next(f)
			while not row.startswith("#DG"):
				# format and append the matrix row:
				row = [ float(value) for value in row.split(" ") ]
				overlap_matrix.append(row)
				row = next(f)

			overlap_matrix = np.array(overlap_matrix)

		## FREENRG & ERROR
		# read the line after the #MBAR keyword for energy prediction.
		if line.startswith("#MBAR"):
			# grab and process next line.
			prediction_line = next(f)
			try:

				MBAR_freenrg = prediction_line.split(", ")[0].split("  ")[0].rstrip()
				MBAR_error = prediction_line.split(", ")[1].split("  ")[0].rstrip()
			except IndexError:
				pass

	if verbose:
		print(np.array_str(overlap_matrix, precision=3, suppress_small=True))
		print("Freenrg:", MBAR_freenrg)
		print("MBAR error:", MBAR_error)


	return overlap_matrix, float(MBAR_freenrg), float(MBAR_error)

def plotOverlapMatrix(overlap_matrix):
	"""
	Given a SOMD-style overlap numpy matrix, plot heatmap in best practices style.

	--args 
	overlap matrix (array): numpy 2D array of (n,n)

	--returns 
	figure axis
	"""


	ovlp_mtx = overlap_matrix

	cmap = colors.ListedColormap(['#FBE8EB','#88CCEE','#78C592', '#117733'])
	bounds=[0.0, 0.025, 0.1, 0.3,0.8]
	norm = colors.BoundaryNorm(bounds, cmap.N, clip=False)
	cbar_kws=dict(ticks=[.025, .1, .3,0.8], label='Phase space overlap')
	ax = sns.heatmap(ovlp_mtx,annot=False, fmt='.2f', linewidths=.3, 
	                 annot_kws={"size": 14},square=True,robust=True,cmap=cmap, 
	                 norm=norm,cbar_kws=cbar_kws)
	ax.xaxis.tick_top()
	
	return ax